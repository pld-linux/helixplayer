--- hxplay-1.0.1/common/include/atomicbase.h.orig	2004-07-09 03:45:08.000000000 +0200
+++ hxplay-1.0.1/common/include/atomicbase.h	2004-11-18 08:30:02.074183024 +0100
@@ -547,7 +547,8 @@
 #elif defined(__GNUC__) && !defined(_OPENBSD) && \
       (__GNUC__>2 || (__GNUC__==2 && __GNUC_MINOR__>=95)) && \
       ( defined (__i486__) || defined (__i586__) || defined (__i686__) || \
-        defined (__pentium__) || defined (__pentiumpro__))
+        defined (__pentium__) || defined (__pentiumpro__) || defined (__pentium4__) || \
+	defined (__athlon__))
 
 /* Increment by 1 */
 static __inline__ void
--- hxplay-1.0.5/build/lib/sysinfo.py.orig	2005-05-11 20:39:02.000000000 +0200
+++ hxplay-1.0.5/build/lib/sysinfo.py	2005-11-03 20:47:25.000000000 +0100
@@ -314,6 +314,13 @@
     family_list = ['unix', 'linux', 'linux2', 'linux-glibc-2.0'] ))
 
 AddPlatform(Platform(
+    id = 'linux-2.2-libc6-gcc32-alpha',
+    platform = 'linux2',
+    arch = 'alpha',
+    distribution_id = 'linux-2.2-libc6-gcc32-alpha',
+    family_list = ['unix', 'linux', 'linux2', 'gcc3', 'linux-glibc-2.0'] ))
+
+AddPlatform(Platform(
     id = 'linux-2.2-libc6-powerpc',
     platform = 'linux2',
     arch = 'powerpc',
@@ -1015,14 +1022,24 @@
         gcc_version=os.popen("gcc -dumpversion").read()
         gcc_version=string.strip(gcc_version)
 
-        if gcc_version[0] == "3":
+        if gcc_version[0] == "3" or gcc_version[0] == '4':
             set_platform('linux-2.2-libc6-gcc32-i586')
         else:
             set_platform('linux-2.2-libc6-i586')
 
+    ## Linux x86_64
+    elif arch == 'x86_64':
+	set_platform('linux-2.6-glibc23-amd64')
+
     ## Linux PPC Q3
     elif arch == 'ppc':
-        set_platform('linux-2.2-libc6-powerpc')
+        gcc_version=os.popen("gcc -dumpversion").read()
+        gcc_version=string.strip(gcc_version)
+
+        if gcc_version[0] == "3" or gcc_version[0] == '4':
+            set_platform('linux-2.2-libc6-gcc32-powerpc')
+        else:
+            set_platform('linux-2.2-libc6-powerpc')
         
     ## Linux/Redhat SPARC
     elif arch == 'sparc64' or arch == 'sparc':
@@ -1030,7 +1041,13 @@
 
     ## Linux Alpha
     elif arch == 'alpha':
-        set_platform('linux-2.0-libc6-alpha-gcc2.95')
+        gcc_version=os.popen("gcc -dumpversion").read()
+        gcc_version=string.strip(gcc_version)
+
+        if gcc_version[0] == "3" or gcc_version[0] == '4':
+            set_platform('linux-2.2-libc6-gcc32-alpha')
+        else:
+            set_platform('linux-2.0-libc6-alpha-gcc2.95')
 
     elif arch == 'ia64':
         set_platform('linux-2.4-libc6-ia64')
--- hxplay-1.0.5/build/umakecf/linux-2.6-glibc23-amd64.cf.orig	2005-02-24 22:17:20.000000000 +0100
+++ hxplay-1.0.5/build/umakecf/linux-2.6-glibc23-amd64.cf	2005-11-03 21:17:00.000000000 +0100
@@ -56,10 +56,13 @@
 ## list of PCF files to run
 platform.pcf_prefix_list = ["unix", "linux2", "linux-2.6-glibc23", "linux-2.6-glibc23-amd64"]
 
+## platform defines 
+project.AddDefines("_LITTLE_ENDIAN")
+project.AddDefines("_LONG_IS_64")
 
 ## Turn on i686 ops.
 platform.cxx.args["default"] = platform.cxx.args["default"] + \
-        " -m64 -D__amd64__"
+        " -m64 -D__amd64__ -fno-rtti -fno-exceptions"
 platform.cc.args["default"] = platform.cc.args["default"] + \
         " -m64 -D__amd64__"
 
--- hxplay-1.0.5/audio/fixptutil/pub/math64.h.orig	2004-09-17 20:22:38.000000000 +0200
+++ hxplay-1.0.5/audio/fixptutil/pub/math64.h	2005-11-03 21:34:55.000000000 +0100
@@ -124,7 +124,7 @@
 // GCC / i386
 ///////////////////////////////////////////////////////////////////////////////////////
 
-#if defined(__GNUC__) && defined(__i386__) && !defined(_NO_GNU_AS)
+#if defined(__GNUC__) && (defined(__i386__) || defined(__x86_64__)) && !defined(_NO_GNU_AS)
 
 #define HAVE_PLATFORM_MACROS
 
@@ -288,6 +288,39 @@
 
 #endif
 
+/* generic for LP64 platforms */
+#if defined(__alpha__) || defined(__ia64__)
+static inline int MulDiv64(int a, int b, int c)
+{
+	long t = (long)((long)a * (long)b) ;
+	return (int)(t / c) ;
+}
+/* Compute (a * b) >> 32, using 64-bit intermediate result */
+static inline int MulShift32(int a, int b)
+{
+	long res ;
+	res = (long)((long)a * (long)b);
+	return (res>>32);
+}
+
+/* Compute (a * b) >> 31, using 64-bit intermediate result */
+static inline int MulShift31(int a, int b)
+{
+	long res ;
+	res = (long)((long)a * (long)b);
+	return (res>>31);
+}
+
+/* Compute (a * b) >> 30, using 64-bit intermediate result */
+static inline int MulShift30(int a, int b)
+{
+	long res ;
+	res = (long)((long)a * (long)b);
+	return (res>>30);
+}
+
+#endif
+
 ///////////////////////////////////////////////////////////////////////////////////////
 // Codewarrior / PowerPC
 ///////////////////////////////////////////////////////////////////////////////////////
--- hxplay-1.0.5/datatype/image/jpg/import/jpeg-6b/jmorecfg.h.orig	2003-06-18 18:17:45.000000000 +0200
+++ hxplay-1.0.5/datatype/image/jpg/import/jpeg-6b/jmorecfg.h	2005-11-03 21:47:08.000000000 +0100
@@ -158,7 +158,7 @@
 /* INT32 must hold at least signed 32-bit values. */
 
 #ifndef XMD_H			/* X11/xmd.h correctly defines INT32 */
-#if (defined _UNIX && (defined _ALPHA || defined _OSF1))
+#if (defined _UNIX && (defined _ALPHA || defined _LP64 || defined _OSF1))
 typedef int INT32;
 #else
 typedef long INT32;
--- hxplay-1.0.5/common/import/gecko-sdk/nspr/include/prcpucfg.h.orig	2004-12-22 21:00:40.000000000 +0100
+++ hxplay-1.0.5/common/import/gecko-sdk/nspr/include/prcpucfg.h	2005-11-03 22:03:45.000000000 +0100
@@ -182,6 +182,52 @@
 #define PR_BYTES_PER_WORD_LOG2  3
 #define PR_BYTES_PER_DWORD_LOG2 3
 
+#elif defined(__x86_64__)
+
+#define IS_LITTLE_ENDIAN 1
+#undef  IS_BIG_ENDIAN
+#define IS_64
+
+#define PR_BYTES_PER_BYTE   1
+#define PR_BYTES_PER_SHORT  2
+#define PR_BYTES_PER_INT    4
+#define PR_BYTES_PER_INT64  8
+#define PR_BYTES_PER_LONG   8
+#define PR_BYTES_PER_FLOAT  4
+#define PR_BYTES_PER_DOUBLE 8
+#define PR_BYTES_PER_WORD   8
+#define PR_BYTES_PER_DWORD  8
+
+#define PR_BITS_PER_BYTE    8
+#define PR_BITS_PER_SHORT   16
+#define PR_BITS_PER_INT     32
+#define PR_BITS_PER_INT64   64
+#define PR_BITS_PER_LONG    64
+#define PR_BITS_PER_FLOAT   32
+#define PR_BITS_PER_DOUBLE  64
+#define PR_BITS_PER_WORD    64
+
+#define PR_BITS_PER_BYTE_LOG2   3
+#define PR_BITS_PER_SHORT_LOG2  4
+#define PR_BITS_PER_INT_LOG2    5
+#define PR_BITS_PER_INT64_LOG2  6
+#define PR_BITS_PER_LONG_LOG2   6
+#define PR_BITS_PER_FLOAT_LOG2  5
+#define PR_BITS_PER_DOUBLE_LOG2 6
+#define PR_BITS_PER_WORD_LOG2   6
+
+#define PR_ALIGN_OF_SHORT   2
+#define PR_ALIGN_OF_INT     4
+#define PR_ALIGN_OF_LONG    8
+#define PR_ALIGN_OF_INT64   8
+#define PR_ALIGN_OF_FLOAT   4
+#define PR_ALIGN_OF_DOUBLE  8
+#define PR_ALIGN_OF_POINTER 8
+#define PR_ALIGN_OF_WORD    8
+
+#define PR_BYTES_PER_WORD_LOG2  3
+#define PR_BYTES_PER_DWORD_LOG2 3
+
 #elif defined(__mc68000__)
 
 #undef  IS_LITTLE_ENDIAN
--- hxplay-1.0.5/common/include/atomicbase.h.orig	2005-11-03 22:22:27.000000000 +0100
+++ hxplay-1.0.5/common/include/atomicbase.h	2005-11-03 23:14:46.000000000 +0100
@@ -855,6 +855,114 @@
  */
 #elif defined (__alpha)
 
+#  ifdef __GNUC__
+
+/* Increment by 1 and return new value */
+static inline INT32
+HXAtomicIncRetINT32(INT32* pNum)
+{
+    asm volatile (
+        "10:     ldl_l   $1, %0\n"          // Load-lock value into a register
+        "        addl    $1, 1, $1\n"       // Increment value
+        "        stl_c   $1, %0\n"          // Save new value into *pNum
+        "        beq     $1, 10b\n"         // Retry if sequence failed
+        : "=m" (*pNum) : "m" (*pNum) : "$1");
+    return *pNum;
+}
+
+/* Decrement by 1 and return new value */
+static inline INT32
+HXAtomicDecRetINT32(INT32* pNum)
+{
+    asm volatile (
+        "10:     ldl_l   $1, %0\n"          // Load-lock value into a register
+        "        subl    $1, 1, $1\n"       // Decrement value
+        "        stl_c   $1, %0\n"          // Save new value into *pNum
+        "        beq     $1, 10b\n"         // Retry if sequence failed
+        : "=m" (*pNum) : "m" (*pNum) : "$1");
+    return *pNum;
+}
+
+/* Add n and return new value */
+static inline INT32
+HXAtomicAddRetINT32(INT32* pNum, INT32 n)
+{
+    asm volatile (
+        "10:     ldl_l   $1, %0\n"          // Load-lock value into a register
+        "        addl    $1, %1, $1\n"      // Add n to value
+        "        stl_c   $1, %0\n"          // Save new value into *pNum
+        "        beq     $1, 10b\n"         // Retry if sequence failed
+        : "=m" (*pNum) : "r" (n), "m" (*pNum) : "$1");
+    return *pNum;
+}
+
+/* Subtract n and return new value */
+static inline INT32
+HXAtomicSubRetINT32(INT32* pNum, INT32 n)
+{
+    asm volatile (
+        "10:     ldl_l   $1, %0\n"          // Load-lock value into a register
+        "        subl    $1, %1, $1\n"      // Subtract n from value
+        "        stl_c   $1, %0\n"          // Save new value into *pNum
+        "        beq     $1, 10b\n"         // Retry if sequence failed
+        : "=m" (*pNum) : "r" (n), "m" (*pNum) : "$1");
+    return *pNum;
+}
+
+/* Increment by 1 and return new value */
+static inline UINT32
+HXAtomicIncRetUINT32(UINT32* pNum)
+{
+    asm volatile (
+        "10:     ldl_l   $1, %0\n"          // Load-lock value into a register
+        "        addl    $1, 1, $1\n"       // Increment value
+        "        stl_c   $1, %0\n"          // Save new value into *pNum
+        "        beq     $1, 10b\n"         // Retry if sequence failed
+        : "=m" (*pNum) : "m" (*pNum) : "$1");
+    return *pNum;
+}
+
+/* Decrement by 1 and return new value */
+static inline UINT32
+HXAtomicDecRetUINT32(UINT32* pNum)
+{
+    asm volatile (
+        "10:     ldl_l   $1, %0\n"          // Load-lock value into a register
+        "        subl    $1, 1, $1\n"       // Decrement value
+        "        stl_c   $1, %0\n"          // Save new value into *pNum
+        "        beq     $1, 10b\n"         // Retry if sequence failed
+        : "=m" (*pNum) : "m" (*pNum) : "$1");
+    return *pNum;
+}
+
+/* Add n and return new value */
+static inline UINT32
+HXAtomicAddRetUINT32(UINT32* pNum, UINT32 n)
+{
+    asm volatile (
+        "10:     ldl_l   $1, %0\n"          // Load-lock value into a register
+        "        addl    $1, %1, $1\n"      // Add n to value
+        "        stl_c   $1, %0\n"          // Save new value into *pNum
+        "        beq     $1, 10b\n"         // Retry if sequence failed
+        : "=m" (*pNum) : "r" (n), "m" (*pNum) : "$1");
+    return *pNum;
+}
+
+/* Subtract n and return new value */
+static inline UINT32
+HXAtomicSubRetUINT32(UINT32* pNum, UINT32 n)
+{
+    asm volatile (
+        "10:     ldl_l   $1, %0\n"          // Load-lock value into a register
+        "        subl    $1, %1, $1\n"      // Subtract n from value
+        "        stl_c   $1, %0\n"          // Save new value into *pNum
+        "        beq     $1, 10b\n"         // Retry if sequence failed
+        : "=m" (*pNum) : "r" (n), "m" (*pNum) : "$1");
+    return *pNum;
+}
+
+#  else
+
 #include <c_asm.h>
 
 /* Increment by 1 and return new value */
@@ -961,6 +1067,8 @@
         , pNum, n);
 }
 
+#  endif
+
 #define HXAtomicIncINT32(p)    HXAtomicIncRetINT32((p))
 #define HXAtomicDecINT32(p)    HXAtomicDecRetINT32((p))
 #define HXAtomicAddINT32(p,n)  HXAtomicAddRetINT32((p),(n))
--- hxplay-1.0.5/audio/device/pub/platform/unix/audlinux_oss.h.orig	2004-07-09 04:02:00.000000000 +0200
+++ hxplay-1.0.5/audio/device/pub/platform/unix/audlinux_oss.h	2005-11-03 23:46:56.000000000 +0100
@@ -53,7 +53,7 @@
 //-----------------------------------------------
 // System includes.
 //-----------------------------------------------
-#if defined( _LINUX ) && !defined( __powerpc__ )  && !defined __alpha && !defined __sparc__
+#if defined( _LINUX ) && !defined( __powerpc__ )
 #include "linux/soundcard.h"
 #elif defined(__powerpc__)
 #include "sys/soundcard.h"
--- hxplay-1.0.5/build/umakecf/linux-2.2-libc6-gcc32-alpha.cf.orig	1970-01-01 01:00:00.000000000 +0100
+++ hxplay-1.0.5/build/umakecf/linux-2.2-libc6-gcc32-alpha.cf	2005-11-04 11:15:52.000000000 +0100
@@ -0,0 +1,61 @@
+# 
+# ***** BEGIN LICENSE BLOCK *****
+# Source last modified: $Id$
+# 
+# Portions Copyright (c) 1995-2004 RealNetworks, Inc. All Rights Reserved.
+# 
+# The contents of this file, and the files included with this file,
+# are subject to the current version of the RealNetworks Public
+# Source License (the "RPSL") available at
+# http://www.helixcommunity.org/content/rpsl unless you have licensed
+# the file under the current version of the RealNetworks Community
+# Source License (the "RCSL") available at
+# http://www.helixcommunity.org/content/rcsl, in which case the RCSL
+# will apply. You may also obtain the license terms directly from
+# RealNetworks.  You may not use this file except in compliance with
+# the RPSL or, if you have a valid RCSL with RealNetworks applicable
+# to this file, the RCSL.  Please see the applicable RPSL or RCSL for
+# the rights, obligations and limitations governing use of the
+# contents of the file.
+# 
+# Alternatively, the contents of this file may be used under the
+# terms of the GNU General Public License Version 2 or later (the
+# "GPL") in which case the provisions of the GPL are applicable
+# instead of those above. If you wish to allow use of your version of
+# this file only under the terms of the GPL, and not to allow others
+# to use your version of this file under the terms of either the RPSL
+# or RCSL, indicate your decision by deleting the provisions above
+# and replace them with the notice and other provisions required by
+# the GPL. If you do not delete the provisions above, a recipient may
+# use your version of this file under the terms of any one of the
+# RPSL, the RCSL or the GPL.
+# 
+# This file is part of the Helix DNA Technology. RealNetworks is the
+# developer of the Original Code and owns the copyrights in the
+# portions it created.
+# 
+# This file, and the files included with this file, is distributed
+# and made available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY
+# KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS
+# ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES
+# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET
+# ENJOYMENT OR NON-INFRINGEMENT.
+# 
+# Technology Compatibility Kit Test Suite(s) Location:
+#    http://www.helixcommunity.org/content/tck
+# 
+# Contributor(s):
+# 
+# ***** END LICENSE BLOCK *****
+# 
+"""Linux 2.x using GCC 3.2 libc6 on the Alpha processor. This is used for
+building the RealPlayer client only."""
+
+exec_config_file('linux-2.2-libc6-gcc32.cf')
+
+## list of PCF files to run
+platform.pcf_prefix_list = ['unix', 'linux2', "linux-2.2-libc6-gcc32-alpha"]
+
+## platform defines 
+project.AddDefines("_ALPHA", "_LONG_IS_64", "_LITTLE_ENDIAN", "_STRICT_ALIGNMENT")
+
